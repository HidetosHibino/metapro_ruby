# irbの例
# irb は標準入力やファイルをパースして、それぞれの行をevalに渡すシンプルなプログラムである。
# （こうしたプログラムはコードプロセッサと呼ばれる。）
# 以下がeval を呼び出す部分。 irb の workspave.rbに書かれている。

# def evaluate(statements, file = __FILE__, line = __LINE__)
  # eval(statements, @binding, file, line)
# end

# statements は Rubyのコード行。
# その他あの変数について
# eval に渡されている最初の任意の引数はBinding だ。
# irb が異なるセッションで実行するときにこの引数を使う。
# 例えば、特定のオブジェクトで、irb セッションをネストして開く場合。
# 既存のirb のセッションの中で、 irb とオブジェクトと名前を入力すれば、以降のコマンドはそのオブジェクトのコンテキストで評価される。
# これはinstance_eval とよく似ている。

# 残りのfile と line についてはどうだろうか？
# これらの引数は例外が発生したときにスタックトレースを調整するために使う。
# 以下で動作を確認する。

x = 1/0

# コマンドプロンプトで、　 irb 6_2_3.rb　で実行できる。

# 結果
# 6_2_3.rb:22:in `/': divided by 0 (ZeroDivisionError)
# #         from 6_2_3.rb:22:in `<top (required)>'

# irb は eval を呼び出すときに、処理中のファイル名と行番号を一緒に呼び出している。
# 例外のスタックトレースで正しい情報が取得できるのはこのためだ。
# irb のソースをハックして、eval の引数の後ろ二つを削除するとどうなるか？
